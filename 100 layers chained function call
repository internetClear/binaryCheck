100层链式调用、200M、2分钟
二进制指令检测工具的程序分析性能测试

引言：上次我们谈到要对100层的函数调用做二进制指令级分析。因为超过10层深度函数调用的代码漏洞很难检测：人工基本不可能；源代码检测工具通常也会因分析时间和空间复杂度过大而主动放弃；fuzz测试对深度调用基本不能找到其路径。鉴于深度调用的分析难题，我们想挑战哈，以此检验我们的二进制分析工具的能力。

1. 100层函数调用的二进制指令分析测试代码生成
做100层深度链式函数调用的分析检测，首先要生成目标代码。考虑到100层链式调用代码编写太无聊，就一直拖着。后来突然想到可以让AI去帮忙生成，大喜。
给AI说明了我们的要求，结果他告诉我一堆原理，方法，思路，就是不给我生成代码。逼急了，就说系统忙。看来这种无聊的问题AI也不愿意做，没办法，只好我自己写了。
花了2天，勉强写了个100层深度的链式函数调用，编译，生成了二进制代码。
2. 艰难的测试过程
也许是近乡情怯吧，也许是害怕惨不忍睹，刚开始我其实一直不敢测试。拖了几天，还是做了测试。
首先是时间，近半小时没有反应，但是内存却一直上升。打了很多桩做提示，显示还是在工作的。但是一直没有结果，为什么？这个还谈不上WCET，应该说是最大消耗时间的块，好像有个专业名词，我忘了。这个好像也没有工具可以找，只能自己分析了。历经的曲折就不说了。后来定位到消耗内存大的一个阶段：循环输入/输出变量判定识别太复杂。修改后好了些。不断优化一些分析过程，时间算是不断减少。
还有一个问题是分析过程中的内存消耗，最早完成分析时显示接近6G的内存消耗（为此我还截了图）。我10年前的电脑可是12G内存，还可以顶的住，但是这比我的理论计算结果差距太远了：我原计算消耗内存在100M左右的。肯定是有大量的内存泄露了。只能是一点一点的查。C语言的内存泄露确实麻烦。我一直不喜欢用自动化工具查，因为没有看到靠谱的工具（希望我们以后能贡献点东西）。反复的查找，分析代码设计流程，个中的艰难就不说了。反正后来降低到了大约200M，有点高兴。尽管没有达到预期的目标，这个已经可以接受了；至于还有的内存泄露就让别人找吧，只要不影响运行就可以了。
3. 分析结果
具体的测试修改很沉闷，说哈结果鼓舞哈士气的：100层链式函数调用，分析数据流、控制流、符号值、函数和循环总结，并生成相关结果保存。用时约2分钟、内存消耗约200M。作为实验型的工具基本没有问题，相信还有很多BUG。
说个题外话，现在人工智能很火，我不是很懂AI，不知道AI能否分析检测深度调用或复杂路径类的程序，如100层链式函数调用、多重循环之类的东西。如有了解的敬请赐教，不胜感激！

下一步，在上述分析的基础上，我们将尝试做100层代码的基本型漏洞检测，敬请关注。我们缺少二进制层面的漏洞样本和检测规则集特征描述；也缺二进制漏洞挖掘的应用需求；特别是工控固件类的需求，有相关资源的敬请联系我们。
