Fuzz覆盖率评估工具FP-cov

1 什么是fuzz
Fuzz是漏洞挖掘的一个主要的手段，其基本方法是：通过大规模的不同输入到同一程序，执行该程序，以得到异常，从而根据输入判断程序存在的问题。
2 fuzz的用途
当前，国内外都将fuzz作为漏洞挖掘的一种重要手段。其特点表现为操作简单，对分析人员要求不高；发现问题准确，误报率低。在闭源的二进制软件场景，fuzz几乎是唯一的自动化分析检测手段。从而受到广大黑客和安全工作者的喜爱。
当然，fuzz测试也有显而易见的缺点：测试的系统性和完备性不足，从而导致测试有大量的漏报。
3 fuzz测试的评估方法
针对fuzz测试的不完备性问题，研究人员提出了fuzz测试的覆盖率评估工具。当前国内外对fuzz测试都采用覆盖率作为评估指标。通常覆盖率有行覆盖或分支覆盖。所谓行覆盖，即统计fuzz执行了目标程序的代码行统计；所谓分析覆盖，即统计fuzz执行了目标程序的条件分支统计。这两种覆盖是当前业界的主流统计方式。例如，GCC的gCov[1]、java的jacoco[2]、python的覆盖率[3]、llvm/clang等都采用行覆盖或分支覆盖。
此外，在民航业主要采用MC/DC修正条件判定覆盖。但这种覆盖率过于小众，实际意义有限。
4当前fuzz覆盖率解决方案弊端
Fuzz虽然为广大安全人员所接受，但是也存在很多问题。
4.1 没有明确的执行终止标准
很多工具声称采用覆盖率作为fuzz测试执行评估标准。但实际应用中，Fuzz测试一般以执行时长（如24小时）或执行次数（如3千万次）作为终止条件，但是究竟执行多少次或执行多长时间并没有统一的标准。更多情况下是一线工程技术人员拍脑袋根据经验来决定。从而浪费了大量的算力，或者测试不充分。很多一线厂商都是这种现状。
4.2 Fuzz测试工具好坏没有标准
以发现漏洞为原则？显然不行。因为不同被测目标对象的漏洞数量不同，发现漏洞的个数显然有很大的差异。针对同一程序，当然fuzz发现漏洞越多越好，但是由于fuzz本身执行的不完备性，很多情况下发现的问题并来多。以此为指标显然也不具备科学性。也有采用覆盖率为指标。具体为行覆盖、分支覆盖等。
当然，fuzz测试还有其它一些问题，由于不是本项目讨论的重点，在此不做分析。
4.3 fuzz测试应用问题实例分析
通常认为，行覆盖或分支覆盖是没有意义的。以包含10个分支，100个路径，50行代码为例。如果有两个分支可以实现全部行覆盖，则显然只需2次执行就可以实现100%的歫覆盖；极端情况下，只需执行10次就可以实现100%分支覆盖；但路径覆盖则要执行100次才能实现100%覆盖。显然，路径覆盖是最准确的，这也正说明行覆盖或分支覆盖基本没有测试意义。
此外，在状态相关fuzz测试中，盲目的测试是没有意义的，必须有针对性的在同一路径上做多次按状态条件规律性变化做不同的系统性测试。显然，这些在现有的fuzz效能评估中都是无法应对的。
5 我们的思路
	通过独特的代码分析技术，统计出代码的所有执行综合效能特征
	统计fuzz测试中目标代码的执行综合效能特征
	做对比分析，计算fuzz测试的综合效能覆盖率
应用场景：当前仅能应用于有源代码的fuzz测试场景；后期可以拓展到无源代码的fuzz测试应用场景。
6 现阶段完成了什么
	插桩：针对源代码的执行特性，我们做了源代码的插桩工具。以便在fuzz执行时统计综合效能指标。（已完成技术验证）
	统计分析：通过源代码的静态分析，结合动态分析。计算源代码的综合效能指标。（已完成技术验证）
	综合效能指标分析报告：在fuzz执行后，我们研发了统计程序，用于统计程序的综合效能指标，与静态分析的特征做比较，从而判定综合效能指标。（已完成技术验证）
7 价值意义
	全球首个fuzz综合覆盖率评估工具---覆盖率评估标准早已存在，但缺少工具
	为fuzz测试提供了更有效的评估工具----对标gcc的gCOV、jacoco等评估工具
	为fuzz测试的具体执行时长提供了指导依据----减少算力浪费，提高了计算效率
	为fuzz精准测试奠定了良好的基础----通过执行效能的精确分析与统计，为fuzz测试用例的快速收敛提供了分析依据；也为测试用例针对性生成提供了基础
8 国内外现状分析
	某大厂实验室有研究人员提出了if条件分支统计的思路；
	微软、IBM等采用分支覆盖和行覆盖；
	国内有相关工具声称实现了行覆盖和分支覆盖。
9 参考文献
[1] https://gcc.gnu.org/onlinedocs/gcc/Gcov.html#Gcov
[2] https://www.eclemma.org/jacoco/trunk/index.html
[3] https://coverage.readthedocs.io/en/lastest/cmd.html


