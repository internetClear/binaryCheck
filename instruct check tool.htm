二进制软件安全检测工具
寻应用合作项目伙伴

简介：二进制软件漏洞挖掘主要采用fuzz测试和人工两种手段，系统性和全面性问题一直没有很好解决！！！我们的二进制指令安全分析检测自动化工具初步解决了上述问题；并在大规模软件检测面临的性能、效率等瓶颈方面有了突破。当前工具已经能对二进制软件内部逻辑结构特征做深入细致的自动化分析；能做简单的漏洞挖掘检测；对复杂漏洞的挖掘功能的实现正逐步展开……
因资源、能力有限，工具还缺少检测漏洞规则集；应用平台场景待拓展；漏洞挖掘实战支撑人员不足。特寻合作伙伴。
1 二进制指令安全分析检测工具介绍
工具用于二进制软件（无源代码场景）的漏洞挖掘、后门查找、病毒及恶意代码分析等。
1.1 工具分析对象
无源代码条件下的二进制软件，包含但不限于：Windows下的PE格式文件，如EXE执行文件、DLL动态库文件、OS内核文件；Linux下如ELF文件，如内核文件；ARM下的执行文件；固件内代码；工控芯片代码。
1.2 技术原理
技术方向：静态分析技术+动态分析技术。
基本方案：在利用现有反汇编工具（如IDA、Ghidra、Gdb等）对二进制软件做反汇编分析生成指令级汇编代码的前提下，工具分析指令的内部逻辑结构特征，如函数特征分析、循环特征分析、中断或函数调用、控制流分析（即执行路径分析）、数据流分析（即数据依赖）、符号执行分析（即变量和寄存器取值分析）等；同时，基于上述结构特征收集分析整理漏洞或病毒的特征；最后根据软件逻辑结构特征和漏洞特征编制检测规则集，做比较匹配判定。
工具也可对二进制代码反汇编生成的IR做上述同样的内部逻辑结构特征分析和检测。
工具对标veracode Binary Analysis，原理与其基本相似，但也有很大的区别：
	工具分析的二进制软件不需要生成中间代码（IR），而是直接对汇编指令做分析；
	工具完全基于路径敏感的分析，这一技术方案相对更精确；
	工具在涉及性能和效率方面有独立的解决方案和创新技术算法，不会因为代码量、代码复杂度的变化出现显著性能下降。
1.3 应用场景
	无源代码条件下的二进制软件自动化漏洞挖掘（如OS或后台服务器软件的漏洞挖掘）
	手工二进制漏洞动态分析辅助
	Fuzz测试的路径分析及约束条件定位输入
	固件及工控二进制代码安全分析
	需要精确的二进制软件内部逻辑结构特征分析的其它各类应用（如病毒恶意代码分析、同源性分析、AI安全中提供二进制软件学习数据支撑）。
2 期望的合作
2.1 二进制漏洞挖掘分析方向
目标：致力于打磨高水平的二进制漏洞挖掘工具。
期望合作资源：熟悉二进制指令特征分析及反汇编工具（如IDA、Ghidra）、熟悉二进制条件的漏洞特征、能提供大规模二进制漏洞分析的需求和应用场景条件，能提供二进制指令级漏洞特征规则模型（任一均可）。
现有基础：能提供指令的函数栈帧、函数参数、控制流、数据流、符号值自动化分析；已编码实现。
2.2 工控固件漏洞挖掘分析方向
目标：研发完成工控固件类漏洞挖掘自动化工具。
期望合作资源：有工控固件类二进制漏洞分析需求；能提供工控环境下的二进制指令分析环境条件、掌握相关漏洞特征规则。
现有基础：实现了二进制指令级综合分析功能；能分析x86下的PE格式二进制指令文件；短期内可实现对ELF、ARM等环境的二进制指令（含IR）分析。
2.3 Fuzz测试方向
目标：打造更具全面性和系统性的Fuzz测试工具。
期望合作资源：掌握Fuzz测试技术并具备持续研发改进Fuzz测试工具的能力；最好有自主研发的Fuzz测试工具。
现有基础：能提供指令级路径分析、路径约束条件分析、符号值分析等。
2.4 源代码静态分析方向
目标：打造解决效率和精度问题的源代码分析检测工具。
期望合作资源：有志于打造自主可控的高精度、高效率源代码静态分析工具；在静态分析工具研发中遇到时间效率和精度方面的瓶颈问题待解决，或自主可控方面问题待提高。
现有基础：有独立代码分析引擎实现方案；有独立的控制流、数据流、符号执行实现算法；有独立创新的通用循环总结/函数总结分析方案。（已编码实现；可快速向多语言复制）。
2.5 高精度、高自动化软件安全方向
目标：打造高精度、高自动化软件安全分析检测平台工具；实现动态和静态的结合、源代码和二进制的结合；打造软件全生命周期安全分析检测闭环。
期望合作资源：有全生命周期软件安全平台工具研发部署需求；有海量代码分析应用环境；在软件分析检测的精度和自动化方面遇到瓶颈，或自主可控方面有问题。
现有基础：初步研发验证实现了二进制指令分析工具；源代码静态分析工具研发相关技术基本掌握并可快速实现；有C语言源代码静态分析引擎实现基础；在精度和效率等相关技术瓶颈问题上有解决提高方案。
2.6 AI安全方向
目标：提供指令级代码安全的AI学习资源信息数据支持；打造二进制软件AI安全工具。
期望合作资源：有独立的AI安全分析平台或引擎；在二进制软件安全的学习训练方面遇到数据采集瓶颈。
现有基础：能提供全面、系统的二进制指令分析。
2.7 病毒恶意代码分析检测方向
目标：打造病毒恶意代码分析辅助工具（含同源性或二进制指令样本比对分析）。
期望合作资源：有从指令逻辑结构（非编码样本）层面分析检测病毒/后门的需求；有病毒/后门分析检测平台。
现有基础：能提供深入、全面、系统的二进制指令内部逻辑结构特征分析；能提供自定义逻辑结构特征分析检测。
2.8 二进制软件安全类国家项目合作申报方向
目标：联合申报国家或部委级相关项目；填补国内二进制漏洞自动化漏洞挖掘的空白。
期望合作资源：有相关平台能力。
现有基础：有相关技术验证和工具完成基础。
3 二进制指令安全分析工具工程进展
现状：
	已验证基本分析功能：包含函数信息分析、控制流分析、数据流分析、循环分析等。具体验证功能参考附件插件清单1、2、3、4。
	已验证高级分析功能：符号执行分析、路径约束条件符号值分析。具体验证功能参考附件插件清单5、6。
	已验证的技术突破：已验证通用意义的循环总结；已验证5层深度的指令级函数调用符号值分析和总结；正准备100层深度的指令级函数调用总结和符号值分析测试。
	已验证的漏洞检测功能：未初始化漏洞检测、除0漏洞检测。具体验证参考附件插件清单7、8。
	当前正在收集整理二进制软件漏洞规则集，正在持续补充实现中……
	工具在windows下IDA Freeware 8.4版本上完成上述功能验证。
	相关验证有IDA的插件实现，可供下载体验，具体见附件清单。
技术特点：
	全域的路径敏感跟踪分析；全域的符号值跟踪分析；跨文件跨函数分析
	有独立的指令级代码分析的解决方案
	有独立的静态分析基本算法实现方案，含数据流、控制流和符号执行等算法
	有一套独立、自主可控的代码静态分析引擎实现解决方案
	有创新的循环总结和函数总结方案
优点：
	相关技术方案可快速向其它平台环境复制；如Ghidra或其它反汇编应用场景、其它格式指令如ARM等，通过简单修改调整即可在短时间内实现。
	能实现海量代码的深度调用分析，时间和空间消耗在可接受的范围；且精度基本不会下降。
缺点：
	没有二进制漏洞特征样本；缺少规则集。
	具体的应用环境单一：当前仅用于传统软件（如OS内核、服务器后台程序等）二进制漏洞挖掘；没有在工控、估计类漏洞检测方向应用。
价值：
（略）
下一步工作：
	逐步添加规则模型：收集整理二进制层面的特征漏洞并提取添加规则；将源代码层面漏洞在二进制层面复现并提取添加规则。
	开发开放二次开发接口，发布开源版本供更多人员使用。
	实现两个闭环：源代码和二进制分析的闭环；通过与QEMU、fuzz测试等结合的动静态检测与验证闭环。
